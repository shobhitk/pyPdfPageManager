# .gitlab-ci.yml

stages:
  - build
  - release

variables:
  PYTHON_VERSION: "3.13" 
  TOOL_NAME: "PDF Page Editor"
  MAIN_SCRIPT: "launch.py"

build_executable:
  stage: build
  image: python:${PYTHON_VERSION}-slim-buster # Using a slim Debian-based Python image for efficiency
  script:
    - echo "--- Setting up virtual environment ---"
    - python -m venv venv # Create a virtual environment
    - source venv/bin/activate # Activate the virtual environment

    - echo "--- Upgrading pip ---"
    - pip install --upgrade pip # Ensure pip is up-to-date

    - echo "--- Installing dependencies from requirements.txt ---
    - echo "altgraph==0.17.4" > requirements.txt
    - echo "cffi==1.17.1" >> requirements.txt
    - echo "cryptography==45.0.3" >> requirements.txt
    - echo "macholib==1.16.3" >> requirements.txt
    - echo "packaging==25.0" >> requirements.txt
    - echo "pycparser==2.22" >> requirements.txt
    - echo "pyinstaller==6.14.2" >> requirements.txt
    - echo "pyinstaller-hooks-contrib==2025.6" >> requirements.txt
    - echo "pypdf==5.5.0" >> requirements.txt
    - echo "PySide6==6.8.1.1" >> requirements.txt
    - echo "PySide6_Addons==6.8.1.1" >> requirements.txt
    - echo "PySide6_Essentials==6.8.1.1" >> requirements.txt
    - echo "setuptools==75.1.0" >> requirements.txt
    - echo "shiboken6==6.8.1.1" >> requirements.txt
    - echo "wheel==0.44.0" >> requirements.txt
    - pip install -r requirements.txt # Install the specified dependencies

    - echo "--- Running PyInstaller ---"
    # Adjust --windowed or omit it based on whether your tool is GUI or CLI
    - pyinstaller --onefile --windowed --name "${TOOL_NAME}" "${MAIN_SCRIPT}"

  artifacts:
    paths:
      - dist/ # This path contains your compiled executable
    expire_in: 1 week # How long GitLab should keep the artifact

create_gitlab_release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest # Official GitLab Release CLI image
  rules:
    - if: $CI_COMMIT_TAG # This job will only run when a Git tag is pushed
  script:
    - echo "--- Creating GitLab Release for tag $CI_COMMIT_TAG ---"
    # The 'release' keyword is a special GitLab CI feature for creating releases
  release:
    name: 'Release $CI_COMMIT_TAG' # Name of the release, e.g., "Release v1.0.0"
    description: 'Automated release for version $CI_COMMIT_TAG' # Description for the release
    tag_name: '$CI_COMMIT_TAG' # The Git tag that triggered this job
    assets:
      links:
        - name: "${TOOL_NAME}-Executable" # Display name for the asset link
          # This URL points to the artifact generated by the 'build_executable' job.
          # Ensure 'build_executable' matches the job name above.
          # The %{CI_PROJECT_PATH} and %{CI_COMMIT_TAG} are built-in GitLab CI variables.
          url: 'https://gitlab.com/%{CI_PROJECT_PATH}/-/jobs/artifacts/%{CI_COMMIT_TAG}/file/dist/${TOOL_NAME}?job=build_executable'
          filepath: '${TOOL_NAME}' # Optional: The filename that will be shown for the asset
          link_type: 'package' # Optional: 'package' (for executables/archives) or 'other'
